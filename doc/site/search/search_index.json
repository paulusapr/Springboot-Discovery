{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bibliography","text":""},{"location":"#1-setup-in-local-machine","title":"1. Setup In local machine","text":"<ul> <li> <p>1.1. Prerequisite</p> </li> <li> <p>1.2. How Created Project</p> </li> </ul>"},{"location":"#2-design-pattern","title":"2. Design Pattern","text":"<ul> <li> <p>2.1. MVC</p> </li> <li> <p>2.2 How To Created Component</p> </li> <li> <p>2.3. Created Model</p> </li> <li> <p>2.4. Created View</p> </li> <li> <p>2.5. Created Controller</p> </li> </ul>"},{"location":"#3-rest-api","title":"3. REST API","text":"<ul> <li> <p>3.1. Development API</p> </li> <li> <p>3.2. Created Method Get</p> </li> <li> <p>3.3. Created Method Post</p> </li> <li> <p>3.4. Created Method Put</p> </li> <li> <p>3.5. Created Method Delete</p> </li> </ul>"},{"location":"#4-integrated-db","title":"4. Integrated DB","text":"<ul> <li> <p>4.1. Install the database (E.g: PostgreSQL)</p> </li> <li> <p>4.2. Database configuration (E.g: PostgreSQL)</p> </li> <li> <p>4.3. Dependencies (E.g: PostgreSQL)</p> </li> <li> <p>4.4. Connecting with the model</p> </li> <li> <p>4.5. Connect with JPA Repository</p> </li> </ul>"},{"location":"#5-documentation","title":"5. Documentation","text":"<ul> <li> <p>5.1. Prerequisite Swagger</p> </li> <li> <p>5.2. How to Implementation Swagger</p> </li> </ul>"},{"location":"#6-unit-test","title":"6. Unit Test","text":""},{"location":"#61-how-to-setup-unit-test","title":"6.1. How to setup unit test","text":""},{"location":"#62-how-to-implement-unit-test","title":"6.2. How to implement unit test","text":""},{"location":"#63-how-to-run-unit-test","title":"6.3. How to run unit test","text":""},{"location":"#7-build-and-deploy","title":"7. Build and Deploy","text":"<ul> <li> <p>7.1. Prerequisite Web Server</p> </li> <li> <p>7.2. How to Install/Deploy Our Service to Web Server</p> </li> </ul>"},{"location":"MVC/","title":"2. Design Pattern","text":"<p>In Spring Boot, the Spring MVC framework implements this pattern, and it is commonly used to build web applications. Below is an overview of the MVC pattern and how it is typically structured in a Spring Boot application:</p>"},{"location":"MVC/#21-mvc","title":"2.1. MVC","text":"<p>Spring Boot MVC (Model-View-Controller) is a framework for building web applications following the MVC design pattern. It simplifies web application development by providing built-in functionalities such as dependency injection, auto-configuration, and embedded web servers.</p>"},{"location":"MVC/#understanding-mvc-architecture","title":"Understanding MVC Architecture","text":"<p>MVC (Model-View-Controller) is a design pattern used to separate concerns in an application:</p> <ul> <li>Model: Represents the data and business logic.</li> <li>View: Displays the data to the user.</li> <li>Controller: Handles user input and communicates between the model and view.</li> </ul>"},{"location":"MVC/#how-spring-boot-implements-mvc","title":"How Spring Boot Implements MVC:","text":"<ul> <li>Model: Java classes that represent data and use JPA/Hibernate for persistence.</li> <li>View: Typically Thymeleaf, JSP, or frontend frameworks like React/Angular.</li> <li>Controller: Java classes annotated with <code>@Controller</code> or <code>@RestController</code>.</li> </ul>"},{"location":"MVC/#22-how-to-create-a-component","title":"2.2. How To Create a Component","text":"<p>Spring Boot provides several ways to create reusable components using annotations:</p>"},{"location":"MVC/#221-using-component","title":"2.2.1. Using @Component","text":"<p>The <code>@Component</code> annotation marks a class as a Spring-managed component.</p> <pre><code>package com.example.product.component;\n\nimport com.example.product.model.Product;\nimport org.springframework.stereotype.Component;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Component\npublic class ProductComponent {\n\n  private final List&lt;Product&gt; productList = new ArrayList&lt;&gt;();\n\n  public ProductComponent() {\n    productList.add(new Product(1, \"Laptop\", 1500.00));\n    productList.add(new Product(2, \"Smartphone\", 800.00));\n    productList.add(new Product(3, \"Tablet\", 500.00));\n  }\n}\n</code></pre>"},{"location":"MVC/#222-using-service","title":"2.2.2. Using @Service","text":"<p>The <code>@Service</code> annotation is a specialization of <code>@Component</code> for service layer logic.</p> <pre><code>package com.example.product.service;\n\nimport com.example.product.model.Product;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport com.example.product.repository.ProductRepository;\n\n// if you want to use ProductComponent\n// import com.example.product.component.ProductComponent;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class ProductService {\n\n    // if you want to use ProductComponent\n    // private final ProductComponent productComponent;\n    private final ProductRepository productRepository;\n\n    @Autowired\n    public ProductService(ProductRepository productRepository) {\n        this.productRepository = productRepository;\n    }\n}\n</code></pre>"},{"location":"MVC/#223-using-repository","title":"2.2.3. Using @Repository","text":"<p>The <code>@Repository</code> annotation is a specialization of <code>@Component</code> for the persistence layer.</p> <pre><code>package com.example.mvc.repository;\n\nimport com.example.product.model.Product;\nimport org.springframework.stereotype.Repository;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\n\n@Repository\npublic class ProductRepository {\n    private List&lt;Product&gt; products = new ArrayList&lt;&gt;();\n\n    public ProductRepository() {\n        products.add(new Product(1, \"Laptop\", 1200.00));\n        products.add(new Product(2, \"Smartphone\", 800.00));\n    }\n\n    public List&lt;Product&gt; findAll() {\n        return products;\n    }\n\n    public Optional&lt;Product&gt; findById(long id) {\n        return products.stream().filter(p -&gt; p.getId() == id).findFirst();\n    }\n\n    public void save(Product product) {\n        products.add(product);\n    }\n}\n</code></pre>"},{"location":"MVC/#224-using-controller","title":"2.2.4. Using @Controller","text":"<p>The <code>@Controller</code> example <code>@RestController</code> annotation marks a class as a web controller in <code>src/main/java/com/example/product/Controller/ProductController.java</code></p> <pre><code>package com.example.product.controller;\n\nimport com.example.product.model.Product;\nimport com.example.product.service.ProductService;\nimport org.springframework.web.bind.annotation.*;\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api/products\")\npublic class ProductController {\n\n    private final ProductService productService;\n\n    public ProductController(ProductService productService) {\n        this.productService = productService;\n    }\n\n    @GetMapping\n    public List&lt;Product&gt; getAllProducts() {\n        return productService.getAllProducts();\n    }\n}\n</code></pre>"},{"location":"MVC/#23-creating-the-model","title":"2.3. Creating the Model","text":"<p>Create a simple <code>Product</code> model in <code>src/main/java/com/example/product/model/Product.java</code>:</p> <pre><code>package com.example.product.model;\n\npublic class Product {\n    private long id;\n    private String name;\n    private double price;\n\n    // Constructor, getters, and setters\n    public Product(long id, String name, double price) {\n        this.id = id;\n        this.name = name;\n        this.price = price;\n    }\n\n    public long getId() { return id; }\n    public void setId(long id) { this.id = id; }\n\n    public String getName() { return name; }\n    public void setName(String name) { this.name = name; }\n\n    public double getPrice() { return price; }\n    public void setPrice(double price) { this.price = price; }\n}\n</code></pre>"},{"location":"MVC/#24-creating-the-view","title":"2.4. Creating the View","text":"<p>Create <code>user.html</code> inside <code>src/main/resources/templates/</code>:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html xmlns:th=\"http://www.thymeleaf.org\"&gt;\n  &lt;head&gt;\n    &lt;link rel=\"stylesheet\" th:href=\"@{/css/product.css}\" /&gt;\n    &lt;title&gt;Product List&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Product List&lt;/h1&gt;\n    &lt;table class=\"table table-striped table-bordered\"&gt;\n      &lt;thead class=\"table-dark\"&gt;\n        &lt;tr&gt;\n          &lt;th&gt;ID&lt;/th&gt;\n          &lt;th&gt;Name&lt;/th&gt;\n          &lt;th&gt;Price&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr th:each=\"product : ${products}\"&gt;\n          &lt;td th:text=\"${product.id}\"&gt;&lt;/td&gt;\n          &lt;td th:text=\"${product.name}\"&gt;&lt;/td&gt;\n          &lt;td th:text=\"${product.price}\"&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n    &lt;/table&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"MVC/#25-creating-the-controller","title":"2.5. Creating the Controller","text":"<p>Create <code>ProductController</code> in <code>src/main/java/com/example/product/Controller/ProductController.java</code>:</p> <pre><code>package com.example.product.controller;\n\nimport com.example.product.model.Product;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api/products\")\npublic class ProductController {\n  private List&lt;Product&gt; products = new ArrayList&lt;&gt;();\n\n    // Constructor to add some sample products\n    public ProductController() {\n        products.add(new Product(1, \"Laptop\", 799.99));\n        products.add(new Product(2, \"Smartphone\", 499.99));\n        products.add(new Product(3, \"Tablet\", 299.99));\n    }\n\n    // Get all products\n    @GetMapping\n    public List&lt;Product&gt; getAllProducts() {\n        return products;\n    }\n\n    // Get a single product by ID\n    @GetMapping(\"/{id}\")\n    public Product getProductById(@PathVariable long id) {\n        return products.stream()\n                .filter(product -&gt; product.getId() == id)\n                .findFirst()\n                .orElse(null);\n    }\n\n    // Create a new product\n    @PostMapping\n    public Product createProduct(@RequestBody Product product) {\n        products.add(product);\n        return product;\n    }\n\n    // Update an existing product\n    @PutMapping(\"/{id}\")\n    public Product updateProduct(@PathVariable long id, @RequestBody Product updatedProduct) {\n        Product product = getProductById(id);\n        if (product != null) {\n            product.setName(updatedProduct.getName());\n            product.setPrice(updatedProduct.getPrice());\n            return product;\n        }\n        return null;\n    }\n\n    // Delete a product\n    @DeleteMapping(\"/{id}\")\n    public String deleteProduct(@PathVariable long id) {\n        Product product = getProductById(id);\n        if (product != null) {\n            products.remove(product);\n            return \"Product deleted\";\n        }\n        return \"Product not found\";\n    }\n}\n</code></pre>"},{"location":"MVC/#26-creating-the-service","title":"2.6. Creating the Service","text":"<p>Create <code>ProductService</code> in <code>src/main/java/com/example/product/service/ProductService.java</code>:</p> <pre><code>package com.example.product.service;\n\nimport com.example.product.model.Product;\nimport com.example.product.repository.ProductRepository;\nimport org.springframework.stereotype.Service;\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class ProductService {\n    private final ProductRepository productRepository;\n\n    public ProductService(ProductRepository productRepository) {\n        this.productRepository = productRepository;\n    }\n\n    public List&lt;Product&gt; getAllProducts() {\n        return productRepository.findAll();\n    }\n\n    public Optional&lt;Product&gt; getProductById(long id) {\n        return productRepository.findById(id);\n    }\n\n    public void addProduct(Product product) {\n        productRepository.save(product);\n    }\n}\n</code></pre>"},{"location":"MVC/#project-structure-best-practices","title":"Project Structure Best Practices","text":""},{"location":"MVC/#1-standard-mvc-project-structure","title":"1. Standard MVC Project Structure","text":"<pre><code>my-springboot-app/\n\u2502-- src/\n\u2502   \u251c\u2500\u2500 main/java/com/example/app/\n\u2502   \u2502   \u251c\u2500\u2500 controller/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 UserController.java\n\u2502   \u2502   \u251c\u2500\u2500 model/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 User.java\n\u2502   \u2502   \u251c\u2500\u2500 service/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 UserService.java\n\u2502   \u2502   \u251c\u2500\u2500 repository/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 UserRepository.java\n\u2502   \u2502   \u251c\u2500\u2500 MySpringBootApplication.java\n\u2502   \u251c\u2500\u2500 resources/\n\u2502   \u2502   \u251c\u2500\u2500 templates/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 user.html\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 register.html\n\u2502   \u2502   \u251c\u2500\u2500 application.properties\n\u2502-- pom.xml\n</code></pre> <p>\u2705 Good for small to medium projects</p>"},{"location":"MVC/#2-feature-based-structure","title":"2. Feature-Based Structure","text":"<pre><code>my-springboot-app/\n\u2502-- src/main/java/com/example/app/\n\u2502   \u251c\u2500\u2500 user/\n\u2502   \u2502   \u251c\u2500\u2500 controller/UserController.java\n\u2502   \u2502   \u251c\u2500\u2500 service/UserService.java\n\u2502   \u2502   \u251c\u2500\u2500 repository/UserRepository.java\n\u2502   \u2502   \u251c\u2500\u2500 model/User.java\n\u2502   \u251c\u2500\u2500 order/\n\u2502   \u2502   \u251c\u2500\u2500 controller/OrderController.java\n\u2502   \u2502   \u251c\u2500\u2500 service/OrderService.java\n\u2502   \u2502   \u251c\u2500\u2500 repository/OrderRepository.java\n\u2502   \u2502   \u251c\u2500\u2500 model/Order.java\n\u2502-- pom.xml\n</code></pre> <p>\u2705 Good for large applications</p>"},{"location":"MVC/#3-springboot-poc-project-structure","title":"3. Springboot-POC Project Structure","text":"<pre><code>src/\n\u251c\u2500\u2500 main/java/com/example/product/\n\u2502   \u251c\u2500\u2500 component/\n\u2502   \u251c\u2500\u2500 controller/\n\u2502   \u2502   \u251c\u2500\u2500 ProductController.java\n\u2502   \u2502   \u251c\u2500\u2500 ProductPageController.java\n\u2502   \u251c\u2500\u2500 model/\n\u2502   \u2502   \u251c\u2500\u2500 Product.java\n\u2502   \u251c\u2500\u2500 service/\n\u2502   \u2502   \u251c\u2500\u2500 ProductService.java\n\u2502   \u251c\u2500\u2500 repository/\n\u2502   \u2502   \u251c\u2500\u2500 ProductRepository.java\n\u2502   \u251c\u2500\u2500 dto/\n\u2502   \u2502   \u251c\u2500\u2500 ApiResponse.java\n\u2502   \u2502   \u251c\u2500\u2500 ApiErrorResponse.java\n\u2502   \u251c\u2500\u2500 ProductApp.java\n\u251c\u2500\u2500 main/resources/templates/\n\u2502   \u251c\u2500\u2500 product.html\n\u2502   \u251c\u2500\u2500 error/\n\u2502   \u2502   \u251c\u2500\u2500 404.html\n\u2502   \u2502   \u251c\u2500\u2500 500.html\n\u251c\u2500\u2500 main/resources/static/css/\n\u2502   \u251c\u2500\u2500 style.css\n\u251c\u2500\u2500 main/resources/db/migration/\n\u2502   \u251c\u2500\u2500 V1__create_products_table.sql\n\u251c\u2500\u2500 main/resources/application.properties\n</code></pre> <p>\u2705 Good for small to medium projects</p>"},{"location":"MVC/#running-the-application","title":"Running the Application","text":"<ol> <li>Navigate to the project directory.</li> <li>Run the command:    <pre><code> mvn spring-boot:run\n</code></pre></li> <li>Open your browser and access:</li> </ol> <p>Full URL Endpoints</p> <ul> <li>Get All Products: GET <code>http://localhost:8080/api/products</code></li> <li>Get Product By ID: GET <code>http://localhost:8080/api/products/{id}</code></li> <li>Add Product: POST <code>http://localhost:8080/api/products</code></li> </ul> <p>API Response Format</p> <pre><code>// Success Response:\n{\n  \"meta\": {\n    \"code\": 200,\n    \"message\": \"Success\",\n    \"date\": \"2025-03-24T10:00:00Z\"\n  },\n  \"data\": {...},\n  \"error\": []\n}\n\n// Error Response:\n{\n  \"meta\": {\n    \"code\": 400,\n    \"message\": \"Bad Request\",\n    \"date\": \"2025-03-24T10:00:00Z\"\n  },\n  \"data\": null,\n  \"error\": [\"Invalid product ID\"]\n}\n</code></pre>"},{"location":"MVC/#conclusion","title":"Conclusion","text":"<p>This guide provides a hands-on tutorial for Spring Boot MVC, covering setup, project structure, and form handling. You can extend it with Spring Data JPA and Spring Security for a full-fledged application.</p>"},{"location":"buildanddeploy/","title":"7. Build and Deploy","text":""},{"location":"buildanddeploy/#71-download-apache-tomcat","title":"7.1. Download Apache Tomcat","text":"<p>Go to the Apache Tomcat Downloads page.</p> <p>Select the appropriate Tomcat version (e.g., Tomcat 9) and download the tar.gz binary distribution.</p> <p>Click on the tar.gz link to download it.</p> <p>Alternatively, you can use the following command to download Tomcat using wget:</p> <p>wget https://downloads.apache.org/tomcat/tomcat-9/v9.0.60/bin/apache-tomcat-9.0.60.tar.gz</p>"},{"location":"buildanddeploy/#72-extract-the-tomcat-archive","title":"7.2. Extract the Tomcat Archive","text":"<p>Once the download is complete, open the Terminal, navigate to the directory where the file was downloaded, and extract it:</p> <p>tar -xzvf apache-tomcat-9.0.60.tar.gz</p> <p>This will extract the files to a folder named apache-tomcat-9.0.60.</p>"},{"location":"buildanddeploy/#73-how-to-install-apache-tomcat","title":"7.3. How to Install Apache Tomcat","text":"<p>After we unpackage the file, now we see file apache tomcat. Open terminal and go to path below:</p> <p>/apache-tomcat-9.0.102/bin </p> <p>Running the apahce:</p> <p>sh startup.sh sh</p> <p>Now we can see tomcat apache in browser with open url:</p> <p>http://localhost:8080/</p>"},{"location":"buildanddeploy/#74-deploy-jarwar-in-apache-tomcat","title":"7.4. Deploy Jar/War in Apache Tomcat","text":"<p>Open url : http://localhost:8080/</p> <p>click app manager button</p> <p>in section \"WAR file to deploy\", we click choose file.</p> <p>After chose file, now click button deploy.</p>"},{"location":"databaseConnection/","title":"4. Integrated DB","text":""},{"location":"databaseConnection/#41-install-the-database-eg-postgresql","title":"4.1. Install the database (E.g: PostgreSQL)","text":"<ul> <li>Step 1 -&gt; Download PostgreSQL</li> <li>Step 2 -&gt; Run <code>pgAdmin</code> and start the server </li> <li>Step 3 -&gt; Create new database </li> <li>Step 4 -&gt; Enter <code>database name</code> and <code>save</code> </li> <li>Step 5 -&gt; Right Clicks on <code>Tables</code> then <code>Create -&gt; Table</code> </li> <li>Step 6 -&gt; Add new <code>tables</code> to database (E.g: product) </li> <li>Step 7 -&gt; Tables has been added then go to <code>Query Tool</code> </li> <li>Step 8 -&gt; Enter your <code>Query</code> then executed </li> </ul>"},{"location":"databaseConnection/#42-database-configuration-eg-postgresql","title":"4.2. Database configuration (E.g: PostgreSQL)","text":"<ul> <li>Apply this configuration to <code>application.properties</code> <pre><code># JDBC URL for PostgreSQL\nspring.datasource.url=jdbc:postgresql://localhost:5432/inventory_db\n\n# PostgreSQL username and password\nspring.datasource.username=postgres\nspring.datasource.password=admin\n\n# Set the JPA dialect to PostgreSQL\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect\n\n# Enable JPA/Hibernate automatic DDL (optional: update your database schema on app start)\nspring.jpa.hibernate.ddl-auto=update\n\n# Show SQL queries in the console (optional)\nspring.jpa.show-sql=true\n\n# Format SQL queries (optional)\nspring.jpa.properties.hibernate.format_sql=true\n</code></pre></li> </ul>"},{"location":"databaseConnection/#43-dependencies-eg-postgresql","title":"4.3. Dependencies (E.g: PostgreSQL)","text":"<ul> <li>Add new dependencies to <code>pom.xml</code> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.postgresql&lt;/groupId&gt;\n    &lt;artifactId&gt;postgresql&lt;/artifactId&gt;\n    &lt;scope&gt;runtime&lt;/scope&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre></li> </ul>"},{"location":"databaseConnection/#44-connecting-with-the-model","title":"4.4. Connecting with the model","text":"<ul> <li>Import packages <pre><code>import jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Table;\n</code></pre></li> <li>How to use <code>@Entity</code> &amp; <code>@Table</code>, table name of the database (e.g: product) <pre><code>@Entity\n@Table(name=\"product\")\npublic class Product {\n}\n</code></pre></li> <li>Change <code>Id</code> to <code>primary key</code> and make it <code>auto generate</code> (! Important) <pre><code>public class Product {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private long id;\n}\n</code></pre></li> <li>Add constructor (! Important) <pre><code>public class Product {\n    public Product() {\n    }\n\n    // Other constructors or methods if necessary\n}\n</code></pre></li> </ul>"},{"location":"databaseConnection/#45-connect-with-jpa-repository","title":"4.5. Connect with JPA Repository","text":"<ul> <li>Step 1 -&gt; Create Repository <pre><code>package com.example.product.repository;\n\nimport com.example.product.model.Product;\nimport org.springframework.stereotype.Repository;\n\n@Repository\n\npublic class ProductRepository {\n}\n</code></pre></li> <li>Step 2 -&gt; JpaRepository Implementation<ul> <li>Change class to interface and extends with <code>JpaRepository</code> <pre><code>import com.example.product.model.Product;\nimport org.springframework.stereotype.Repository;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\n@Repository\n\npublic interface ProductRepository extends JpaRepository&lt;Product, Long&gt; {\n    // Other constructors or methods if necessary\n}\n</code></pre></li> </ul> </li> <li>Step 3 -&gt; Some constructors will be automatically added to the repository <pre><code>List&lt;Product&gt; findAll(String name);\nList&lt;Product&gt; findById(long id);\n</code></pre></li> <li>Step 4 -&gt; Example Product Service <pre><code>package com.example.product.service;\n\nimport com.example.product.model.Product;\nimport org.springframework.stereotype.Service;\nimport com.example.product.repository.ProductRepository;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class ProductService {\n\n    private final ProductRepository productRepository;\n\n    public ProductService(ProductRepository productRepository) {\n        this.productRepository = productRepository;\n    }\n\n    public List&lt;Product&gt; getAllProducts() {\n        return productRepository.findAll();\n    }\n\n    public Optional&lt;Product&gt; findById(long id) {\n        return productRepository.findById(id);\n    }\n}\n</code></pre></li> <li>Step 5 -&gt; Enabled <code>JpaRepository</code> &amp; <code>Entity</code> to RootApp (e.g: ProductApp.java) <pre><code>package com.example.product;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.autoconfigure.domain.EntityScan;\nimport org.springframework.data.jpa.repository.config.EnableJpaRepositories;\n\n@SpringBootApplication\n@EnableJpaRepositories(\"com.example.product.repository\")\n@EntityScan(\"com.example.product.model\")\npublic class ProductApp {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ProductApp.class, args);\n    }\n}\n</code></pre></li> </ul>"},{"location":"development/","title":"3. Development API","text":"<p>A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions used for building and interacting with web services over HTTP. RESTful APIs are widely used to allow different software applications to communicate with each other, typically over the internet.</p> <p>A RESTful API has a consistent and standardized way of interacting with the resources, typically using HTTP methods such as: GET: Retrieve data from the server. POST: Send data to the server (often to create a new resource). PUT: Update an existing resource on the server. DELETE: Remove a resource from the server.</p>"},{"location":"development/#31-created-method-get","title":"3.1. Created Method Get","text":"<p>the GET method is used to retrieve or fetch data from a server. It is one of the most commonly used HTTP methods and is typically used when the client wants to read information from a specific resource or a collection of resources.</p> <p>This example code is in Spring Boot. For GET requests, we need the annotation @GetMapping. <pre><code>// Get all products\n @GetMapping\npublic List&lt;Product&gt; getAllProducts() {\n    return products;\n}\n</code></pre></p>"},{"location":"development/#32-created-method-post","title":"3.2. Created Method Post","text":"<p>The POST method in a REST API is used to send data to a server, typically to create a new resource or submit data for processing. It is one of the HTTP methods used in RESTful APIs for communication between clients and servers.</p> <p>This example code is in Spring Boot. For POST requests, we need the annotation @PostMapping. <pre><code>// Create a new product\n@PostMapping\npublic Product createProduct(@RequestBody Product product) {\n    products.add(product);\n    return product;\n}\n</code></pre></p>"},{"location":"development/#33-created-method-put","title":"3.3. Created Method Put","text":"<p>The PUT method in a REST API is used to update an existing resource on the server or to create a resource if it does not already exist. PUT requests are typically used when you want to send data to the server and replace the current representation of a resource with the new data provided.</p> <p>This example code is in Spring Boot. For PUT requests, we need the annotation @PutMapping. <pre><code>// Update an existing product\n@PutMapping(\"/{id}\")\npublic Product updateProduct(@PathVariable long id, @RequestBody Product updatedProduct) {\n    Product product = getProductById(id);\n    if (product != null) {\n        product.setName(updatedProduct.getName());\n        product.setPrice(updatedProduct.getPrice());\n        return product;\n    }\n    return null;\n}\n</code></pre></p>"},{"location":"development/#34-created-method-delete","title":"3.4. Created Method Delete","text":"<p>The DELETE method in a REST API is used to remove a resource from the server. When a client sends a DELETE request, it instructs the server to delete the resource identified by the URL.</p> <p>This example code is in Spring Boot. For DELETE requests, we need the annotation @DeleteMapping. <pre><code>// Delete a product\n@DeleteMapping(\"/{id}\")\npublic String deleteProduct(@PathVariable long id) {\n    Product product = getProductById(id);\n    if (product != null) {\n        products.remove(product);\n        return \"Product deleted\";\n    }\n    return \"Product not found\";\n}\n</code></pre></p>"},{"location":"documentation/","title":"5. Documentation","text":""},{"location":"documentation/#51-prerequisite-swagger","title":"5.1. Prerequisite Swagger","text":"<p>Swagger is an API documentation tool that allows developers to interact with and test APIs using a user-friendly interface. Before implementing Swagger in a Spring Boot project, ensure the following prerequisites are met:</p>"},{"location":"documentation/#prerequisites","title":"Prerequisites:","text":"<ul> <li>Spring Boot Application: A running Spring Boot project with REST APIs.</li> <li>Maven or Gradle: Dependency management tool installed.</li> <li>Springfox or OpenAPI: Swagger implementation libraries.</li> <li>Java 11+: Recommended for compatibility and performance.</li> </ul>"},{"location":"documentation/#52-how-to-implement-swagger","title":"5.2. How to Implement Swagger","text":"<p>To integrate Swagger into a Spring Boot project, follow these steps:</p>"},{"location":"documentation/#step-1-add-swagger-dependencies","title":"Step 1: Add Swagger Dependencies","text":"<p>For Springfox Swagger, add the following dependencies to <code>pom.xml</code>:</p> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;io.springfox&lt;/groupId&gt;\n    &lt;artifactId&gt;springfox-boot-starter&lt;/artifactId&gt;\n    &lt;version&gt;3.0.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Or for Springdoc OpenAPI:</p> <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;org.springdoc&lt;/groupId&gt;\n  &lt;artifactId&gt;springdoc-openapi-starter-webmvc-ui&lt;/artifactId&gt;\n  &lt;version&gt;2.3.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"documentation/#step-2-enable-swagger-in-spring-boot","title":"Step 2: Enable Swagger in Spring Boot","text":"<p>Create a Swagger configuration class in <code>com.example.config</code>:</p> <pre><code>package com.example.config;\n\nimport io.swagger.v3.oas.models.OpenAPI;\nimport io.swagger.v3.oas.models.info.Info;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class SwaggerConfig {\n\n  @Bean\n  public OpenAPI customOpenAPI() {\n    return new OpenAPI()\n        .info(new Info()\n            .title(\"Product API\")\n            .version(\"1.0\")\n            .description(\"API documentation for managing products\"));\n  }\n}\n</code></pre>"},{"location":"documentation/#step-3-annotate-api-endpoints","title":"Step 3: Annotate API Endpoints","text":"<p>To document your APIs, use Swagger annotations in the controller:</p> <pre><code>package com.example.product.controller;\n\nimport com.example.product.model.Product;\nimport com.example.product.service.ProductService;\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport org.springframework.web.bind.annotation.*;\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api/products\")\n@Tag(name = \"Product Controller\", description = \"Manage products\")\npublic class ProductController {\n\n    private final ProductService productService;\n\n    public ProductController(ProductService productService) {\n        this.productService = productService;\n    }\n\n    @GetMapping\n    @Operation(summary = \"Get all products\", description = \"Retrieve a list of all available products\")\n    public List&lt;Product&gt; getAllProducts() {\n        return productService.getAllProducts();\n    }\n}\n</code></pre>"},{"location":"documentation/#step-4-enable-openapi-documentation","title":"Step 4: Enable OpenAPI Documentation","text":"<p>Ensure the following properties exist in <code>src/main/resources/application.properties</code>:</p> <pre><code>springdoc.api-docs.enabled=true\nspringdoc.swagger-ui.path=/swagger-ui.html\nserver.error.include-message=always\n</code></pre>"},{"location":"documentation/#step-5-access-swagger-ui","title":"Step 5: Access Swagger UI","text":"<p>After starting your Spring Boot application, access the Swagger UI at:</p> <ul> <li>Swagger UI: <code>http://localhost:8080/swagger-ui/index.html</code></li> <li>OpenAPI JSON: <code>http://localhost:8080/v3/api-docs</code></li> </ul>"},{"location":"documentation/#53-troubleshooting","title":"5.3. Troubleshooting","text":"<p>Issue: 404 Not Found on <code>/v3/api-docs</code></p> <p>If <code>/v3/api-docs</code> returns <code>404</code>, check:</p> <ol> <li>Ensure the Springdoc dependency is included in <code>pom.xml</code>.</li> <li>Run <code>mvn clean install</code> to recompile dependencies.</li> <li>Ensure the application is running properly without errors.</li> <li>Verify that the <code>SwaggerConfig.java</code> class is inside a scanned package.</li> </ol> <p>Issue: Swagger UI Shows Empty List</p> <p>If the Swagger UI loads but doesn\u2019t display your endpoints:</p> <ol> <li>Ensure your controller methods are annotated with <code>@Operation(summary = \"...\")</code>.</li> <li>Verify that <code>@RequestMapping(\"/api/products\")</code> is correctly used in <code>ProductController</code>.</li> <li>Restart the application after making changes.</li> </ol> <p>This completes the setup of Swagger in your Spring Boot application for API documentation and testing.</p>"},{"location":"gettingStarted/","title":"1. Setup In local machine","text":"<p>Setting up a Spring Boot application on your local machine is relatively straightforward. Here\u2019s a step-by-step guide to getting a Spring Boot application up and running:</p>"},{"location":"gettingStarted/#11-prerequisite","title":"1.1. Prerequisite","text":""},{"location":"gettingStarted/#jdk-setup","title":"JDK Setup","text":"<ul> <li><code>brew install openjdk</code> -&gt; install using homebrew </li> <li>Download JDK</li> <li><code>javac --version</code> -&gt; check version of Java </li> </ul>"},{"location":"gettingStarted/#java-prompt","title":"Java Prompt","text":"<ul> <li><code>jshell</code> -&gt; Execute using command prompt (Java Playground) <pre><code>paulus_a@JKMB140139 ~ % jshell\n| Welcome to JShell -- Version 17.0.9\n| For an introduction type: /help intro\n\n[jshell&gt; 9+2\n$1 ==&gt; 11\n\n[jshell&gt; 11-3\n$2 ==&gt; 8\n\n[jshell&gt; System.out.print(10);\n10\n[jshell&gt; System.out.print(\"Hello Java\");\nHello Java\njshell&gt;\n</code></pre></li> </ul>"},{"location":"gettingStarted/#code-editor","title":"Code Editor","text":"<ul> <li>IntelliJ IDEA</li> <li>Visual Studio Code</li> <li>Eclipse</li> </ul>"},{"location":"gettingStarted/#12-how-created-project","title":"1.2. How created project","text":"<ul> <li> <p>3 types of Build System</p> <ul> <li>IntelliJ<ul> <li>IntelliJ IDEA's build system refers to the internal system that helps build and manage the development of Java applications within the IDE itself. It is tightly integrated with the IDE.</li> <li>IntelliJ IDEA's build system refers to the internal system that helps build and manage the development of Java applications within the IDE itself. It is tightly integrated with the IDE.</li> </ul> </li> <li>Maven<ul> <li>Maven is a build automation tool primarily for Java projects. It focuses on the management of project dependencies, compiling, testing, packaging, and deployment.</li> <li>It defines a standard way of building projects with a pom.xml file where you specify your project dependencies, build configuration, and plugins.</li> </ul> </li> <li>Gradle<ul> <li>Like Maven, Gradle is a build automation tool that can manage project dependencies, compile, test, and package code.</li> <li>However, Gradle is more flexible and dynamic than Maven. While Maven relies on XML for configuration (pom.xml), Gradle uses Groovy or Kotlin DSL (domain-specific languages) in build scripts (build.gradle or build.gradle.kts), making it more expressive and concise.</li> </ul> </li> </ul> </li> <li> <p>IntelliJ </p> <ul> <li>Step 1 -&gt; Initiate new project     </li> <li>Step 2 -&gt; Setup new project     </li> <li>Step 3 -&gt; Create a project</li> </ul> </li> <li>Visual Studio Code<ul> <li>Step 1 -&gt; Install all necessary extensions<ul> <li>Spring Boot Extension Pack     </li> <li>Spring Boot Extension Pack     </li> </ul> </li> <li>Step 2 -&gt; Initiate new project<ul> <li>You can go through shortcut <code>Create Java Project</code>  and follow the steps, or with bash commands.     </li> <li><code>&gt;Spring Initializr: Create a Maven Project</code> </li> <li>Choose JAR (Standalone Applications) packaging type, for modern Spring Boot applications aiming for simplicity and ease of deployment, packaging as a JAR is often recommended.     </li> </ul> </li> </ul> </li> </ul>"},{"location":"gettingStarted/#folder-structure","title":"Folder Structure","text":""},{"location":"gettingStarted/#adding-dependencies-visual-studio-code","title":"Adding Dependencies (Visual Studio Code)","text":"<ul> <li>Step1 -&gt; Go to <code>pom.xml</code> file   </li> <li>Step 2 -&gt; Right click and choose <code>Add Starters</code></li> <li>Step 3 -&gt; looking for dependencies   </li> <li>Step 4 -&gt; Proceed   </li> <li>Step 5 -&gt; Dependency added   </li> </ul>"},{"location":"gettingStarted/#how-to-run","title":"How to run","text":"<ul> <li>Step 1 -&gt; Install <code>maven</code> to your local machine<ul> <li>Mac -&gt; <code>brew install maven</code></li> <li>Windows -&gt; Install</li> </ul> </li> <li>Step 2 -&gt; go to root project then run this command <code>mvn spring-boot:run</code></li> </ul>"},{"location":"unittest/","title":"3.3. Unit Test","text":"<p>Unit testing is crucial for verifying that individual components of your Spring Boot application work as expected.</p>"},{"location":"unittest/#332-how-to-setup-unit-test","title":"3.3.2. How to Setup Unit Test","text":""},{"location":"unittest/#step-1-add-dependencies","title":"Step 1: Add Dependencies","text":"<p>Ensure you have the necessary dependencies in <code>pom.xml</code> (if not already present):</p> <pre><code>&lt;!-- Spring Boot Starter Test (Includes JUnit, Mockito, Spring Test) --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n    &lt;scope&gt;test&lt;/scope&gt;\n    &lt;exclusions&gt;\n        &lt;exclusion&gt;\n            &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;\n            &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;\n        &lt;/exclusion&gt;\n    &lt;/exclusions&gt;\n&lt;/dependency&gt;\n\n&lt;!-- Mockito Core --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.mockito&lt;/groupId&gt;\n    &lt;artifactId&gt;mockito-core&lt;/artifactId&gt;\n    &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n\n&lt;!-- Mockito JUnit 5 Integration --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.mockito&lt;/groupId&gt;\n    &lt;artifactId&gt;mockito-junit-jupiter&lt;/artifactId&gt;\n    &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n\n&lt;!-- JUnit 5 (Jupiter) --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;\n    &lt;artifactId&gt;junit-jupiter-api&lt;/artifactId&gt;\n    &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;\n    &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt;\n    &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"unittest/#step-2-create-a-test-directory","title":"Step 2: Create a <code>test</code> Directory","text":"<p>Your unit tests should be inside <code>src/test/java/com/example/product/</code>.</p>"},{"location":"unittest/#333-how-to-implement-unit-test","title":"3.3.3. How to Implement Unit Test","text":""},{"location":"unittest/#unit-test-for-productservice","title":"Unit Test for <code>ProductService</code>","text":"<p>Create a new test class:</p> <p><code>ProductServiceTest.java</code> (inside <code>src/test/java/com/example/product/service/</code>)</p> <pre><code>package com.example.product.service;\n\n@ExtendWith(MockitoExtension.class)\nclass ProductServiceTest {\n\n  @Mock\n  private ProductRepository productRepository;\n\n  @InjectMocks\n  private ProductService productService;\n\n  private Product product1;\n  private Product product2;\n  private LocalDateTime NOW;\n  private Product existingProduct;\n  private Product updatedProductData;\n\n  @BeforeEach\n  void setUp() {\n    NOW = LocalDateTime.now();\n    product1 = new Product(1L, \"Product 1\", 100.0);\n    product2 = new Product(2L, \"Product 2\", 200.0);\n    existingProduct = new Product(1L, \"Product 1\", 100.0);\n    updatedProductData = new Product(1L, \"Updated Product\", 150.0);\n  }\n\n  @Test\n  void testGetAllProducts() {\n    when(productRepository.findAll()).thenReturn(List.of(\n        new Product(1, \"Product 1\", 100.0),\n        new Product(2, \"Product 2\", 200.0)));\n\n    List&lt;Product&gt; products = productService.getAllProducts();\n    assertNotNull(products);\n    assertEquals(2, products.size());\n    assertEquals(\"Product 1\", products.get(0).getName());\n    assertEquals(\"Product 2\", products.get(1).getName());\n    assertEquals(1, products.get(0).getId());\n    assertEquals(2, products.get(1).getId());\n    assertEquals(100.0, products.get(0).getPrice());\n    assertEquals(200.0, products.get(1).getPrice());\n  }\n}\n</code></pre>"},{"location":"unittest/#unit-test-for-productcontroller","title":"Unit Test for <code>ProductController</code>","text":"<p><code>ProductControllerTest.java</code> (inside <code>src/test/java/com/example/product/controller/</code>)</p> <pre><code>package com.example.product.controller;\n\n@ExtendWith(MockitoExtension.class)\nclass ProductControllerTest {\n\n  private MockMvc mockMvc;\n\n  @Mock\n  private ProductService productService;\n\n  @InjectMocks\n  private ProductController productController;\n\n  @BeforeEach\n  void setUp() {\n    mockMvc = MockMvcBuilders.standaloneSetup(productController).build();\n  }\n\n  @Test\n  void testGetAllProducts() throws Exception {\n    List&lt;Product&gt; mockProducts = List.of(\n        new Product(1, \"test 1\", 1.55),\n        new Product(2, \"test 2\", 90.2));\n\n    when(productService.getAllProducts()).thenReturn(mockProducts);\n\n    mockMvc.perform(get(\"/api/products\"))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$.data.length()\").value(2))\n        .andExpect(jsonPath(\"$.data[0].id\").value(1))\n        .andExpect(jsonPath(\"$.data[0].name\").value(\"test 1\"))\n        .andExpect(jsonPath(\"$.data[1].id\").value(2))\n        .andExpect(jsonPath(\"$.data[1].name\").value(\"test 2\"))\n        .andExpect(jsonPath(\"$.meta.status\").value(\"OK\"))\n        .andExpect(jsonPath(\"$.meta.message\").value(\"Success\"));\n\n    verify(productService, times(1)).getAllProducts();\n  }\n}\n</code></pre>"},{"location":"unittest/#334-how-to-run-unit-test","title":"3.3.4. How to Run Unit Test","text":""},{"location":"unittest/#run-all-tests","title":"Run All Tests","text":"<p>To execute all unit tests, run:</p> <pre><code>mvn test\n</code></pre>"},{"location":"unittest/#run-a-specific-test-class","title":"Run a Specific Test Class","text":"<p>To run only <code>ProductServiceTest</code>:</p> <pre><code>mvn -Dtest=ProductServiceTest test\n</code></pre>"},{"location":"unittest/#run-a-specific-test-method","title":"Run a Specific Test Method","text":"<p>To run a single test method:</p> <pre><code>mvn -Dtest=ProductServiceTest#shouldReturnAllProducts test\n</code></pre>"},{"location":"unittest/#summary","title":"Summary","text":"<ol> <li>Setup: Add <code>spring-boot-starter-test</code> and <code>mockito-core</code> dependencies.</li> <li>Write Unit Tests:</li> <li>Service layer: Use <code>@Mock</code> and <code>@InjectMocks</code> to test <code>ProductService</code>.</li> <li>Controller layer: Use <code>MockMvc</code> for HTTP request validation.</li> <li>Run Tests:</li> <li>Use <code>mvn test</code> to run all tests.</li> <li>Use <code>mvn -Dtest=TestClassName test</code> for specific tests.</li> </ol>"}]}